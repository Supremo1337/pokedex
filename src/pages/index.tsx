import Head from "next/head";
import SearchBar from "@/components/SearchBar";
import FilterOptions from "@/components/FilterOptions";
import CardPokemon from "@/components/CardPokemon";
import React, { useEffect, useRef, useState } from "react";
import axios from "axios";
import * as S from "@/components/CardPokemon/styles";
import { usePokeApiRequest } from "@/components/contexts/pokeApiRequestContext";
import Profile from "./profile/[id]";

interface PokemonLimitProps {
  limit: number;
  offSet: number;
}

export default function Home() {
  const { pokemons, setPokemons, allpokemons, getPokemons, loading } =
    usePokeApiRequest();
  const [search, setSearch] = useState("");
  const [openPokemonProfileInDesktop, setOpenPokemonProfileInDesktop] =
    useState(false);
  const [selectedType, setSelectedType] = useState<string | null>(null);
  const divInfiniteScrollRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    getPokemons();
  }, [getPokemons]);

  console.log(pokemons);
  const filterPokemonsByType = (type: string) => {
    // setSearch("");
    setSelectedType(type);
  };

  const pokemonFiltrado =
    pokemons?.filter((pokemon) => {
      // Condição para filtrar por tipo
      const typeCondition =
        selectedType && selectedType !== "type"
          ? pokemon.data?.types.some(
              (type: any) => type.type.name === selectedType
            )
          : pokemons;

      // Condição para filtrar por pesquisa
      // const searchCondition =
      //   !search ||
      //   pokemon.data?.name.toLowerCase().includes(search.toLowerCase()) ||
      //   pokemon.data?.id.toString().includes(search);

      // Combinação das condições
      return typeCondition;
    }) || [];

  useEffect(() => {
    const intersectionObserver = new IntersectionObserver(([entry]) => {
      const ratio = entry.intersectionRatio;
      if (ratio > 0) {
        console.log("OLHAAA AQ ratio", ratio);
        // limit = limit + 33;
        // getPokemons();
      }
    });

    if (divInfiniteScrollRef.current) {
      intersectionObserver.observe(divInfiniteScrollRef.current);
    }
    return () => {
      intersectionObserver.disconnect;
    };
  }, [divInfiniteScrollRef]);

  function handelKeyPress() {
    if (search === "") {
      setPokemons(allpokemons);
      console.log(allpokemons);
    } else {
      const filteredPokemons = pokemons.filter(
        (pokemon) =>
          pokemon.data?.name.toLowerCase().includes(search.toLowerCase()) ||
          pokemon.data?.id.toString().includes(search)
      );
      setPokemons(filteredPokemons);
      console.log("Pokemons Pesquisados", filteredPokemons);
    }
  }

  const useWindowWide = () => {
    const [width, setWidth] = useState(0);

    useEffect(() => {
      function handleResize() {
        setWidth(window.innerWidth);
      }

      window.addEventListener("resize", handleResize);

      handleResize();

      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }, [setWidth]);

    return width;
  };

  const wide = useWindowWide();

  return (
    <>
      <Head>
        <title>Pokédex</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {console.log(wide)}
      <SearchBar
        onClick={() => handelKeyPress()}
        onKeyDown={(e: KeyboardEvent) => {
          e.key === "Enter" ? handelKeyPress() : null;
        }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <FilterOptions onChangeType={filterPokemonsByType} />
      <S.Wrapper>
        <S.Container>
          {loading ? (
            <>
              {pokemonFiltrado.map((pokemon, index) => {
                return (
                  <CardPokemon
                    onClick={() =>
                      setOpenPokemonProfileInDesktop(
                        !openPokemonProfileInDesktop
                      )
                    }
                    sizeScren={wide}
                    key={index}
                    pokemon={pokemon}
                  />
                );
              })}
            </>
          ) : (
            "loading..."
          )}
        </S.Container>
        {openPokemonProfileInDesktop && wide >= 1024 ? (
          <S.WrapperProfileComponent>
            <Profile />
          </S.WrapperProfileComponent>
        ) : null}
      </S.Wrapper>
      {pokemonFiltrado.length > 16 ? <div ref={divInfiniteScrollRef} /> : ""}
    </>
  );
}
