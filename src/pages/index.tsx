import Head from "next/head";
import SearchBar from "@/components/SearchBar";
import FilterOptions from "@/components/FilterOptions";
import CardPokemon from "@/components/CardPokemon";
import React, { useEffect, useRef, useState } from "react";
import axios from "axios";
import { Wrapper } from "@/components/CardPokemon/styles";
import { usePokeApiRequest } from "@/components/contexts/pokeApiRequestContext";

interface PokemonLimitProps {
  limit: number;
  offSet: number;
}

export default function Home() {
  const {
    pokemons,
    setPokemons,
    allpokemons,
    setAllPokemons,
    getPokemons,
    loading,
  } = usePokeApiRequest();
  const [search, setSearch] = useState("");
  const [selectedType, setSelectedType] = useState<string | null>(null);
  const divInfiniteScrollRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    getPokemons();
  }, [getPokemons]);

  const filterPokemonsByType = (type: string) => {
    // setSearch("");
    setSelectedType(type);
  };

  const pokemonFiltrado =
    pokemons?.filter((pokemon) => {
      // Condição para filtrar por tipo
      const typeCondition =
        selectedType && selectedType !== "type"
          ? pokemon.data?.types.some(
              (type: any) => type.type.name === selectedType
            )
          : pokemons;

      // Condição para filtrar por pesquisa
      // const searchCondition =
      //   !search ||
      //   pokemon.data?.name.toLowerCase().includes(search.toLowerCase()) ||
      //   pokemon.data?.id.toString().includes(search);

      // Combinação das condições
      return typeCondition;
    }) || [];

  useEffect(() => {
    const intersectionObserver = new IntersectionObserver(([entry]) => {
      const ratio = entry.intersectionRatio;
      if (ratio > 0) {
        console.log("OLHAAA AQ ratio", ratio);
        // limit = limit + 33;
        // getPokemons();
      }
    });

    if (divInfiniteScrollRef.current) {
      intersectionObserver.observe(divInfiniteScrollRef.current);
    }
    return () => {
      intersectionObserver.disconnect;
    };
  }, [divInfiniteScrollRef]);

  return (
    <>
      <Head>
        <title>Pokédex</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SearchBar
        onClick={() => {
          if (search === "") {
            setPokemons(allpokemons);
            console.log(allpokemons);
          } else {
            const filteredPokemons = pokemons.filter(
              (pokemon) =>
                pokemon.data?.name
                  .toLowerCase()
                  .includes(search.toLowerCase()) ||
                pokemon.data?.id.toString().includes(search)
            );
            setPokemons(filteredPokemons);
            console.log("Pokemons Pesquisados", filteredPokemons);
          }
        }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <FilterOptions onChangeType={filterPokemonsByType} />
      <Wrapper>
        {loading ? (
          <>
            {pokemonFiltrado.map((pokemon, index) => {
              return <CardPokemon key={index} pokemon={pokemon} />;
            })}
          </>
        ) : (
          "loading..."
        )}
      </Wrapper>
      {pokemonFiltrado.length > 16 ? <div ref={divInfiniteScrollRef} /> : ""}
    </>
  );
}
