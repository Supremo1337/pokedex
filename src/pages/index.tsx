import Head from "next/head";
import SearchBar from "@/components/SearchBar";
import FilterOptions from "@/components/FilterOptions";
import CardPokemon from "@/components/CardPokemon";
import React, {
  useEffect,
  useRef,
  useState,
  useCallback,
  KeyboardEvent,
} from "react";
import axios from "axios";
import * as S from "@/components/CardPokemon/styles";
import { usePokeApiRequest } from "@/components/contexts/pokeApiRequestContext";
import Profile from "./profile/[id]";
import { ProfileCard } from "@/components/ProfileCard";

export default function Home() {
  const {
    pokemons,
    setPokemons,
    allpokemons,
    setAllPokemons,
    getPokemons,
    loading,
    id,
    setId,
    setLoading,
  } = usePokeApiRequest();
  const [search, setSearch] = useState("");
  const [openPokemonProfileInDesktop, setOpenPokemonProfileInDesktop] =
    useState(false);
  const [selectedType, setSelectedType] = useState<string | null>(null);
  const divInfiniteScrollRef = useRef<HTMLDivElement>(null);

  const processPokemons = async () => {
    setLoading(true);
    const newPokemons = await getPokemons(pokemons.length + 1);
    setPokemons((currentPokemons) => {
      return [...currentPokemons, ...newPokemons];
    });
    setAllPokemons((currentPokemons) => {
      return [...currentPokemons, ...newPokemons];
    });
    setLoading(false);
  };

  const filterPokemonsByType = (type: string) => {
    // setSearch("");
    setSelectedType(type);
  };

  const pokemonFiltrado =
    pokemons?.filter((pokemon) => {
      const typeCondition =
        selectedType && selectedType !== "type"
          ? pokemon.types.some((type) => type.type.name === selectedType)
          : pokemons;
      return typeCondition;
    }) || [];

  useEffect(() => {
    const intersectionObserver = new IntersectionObserver(([entry]) => {
      const ratio = entry.intersectionRatio;
      if (ratio > 0 && !loading) {
        console.log("OLHAAA AQ ratio", ratio);
        processPokemons();
      }
    });

    if (divInfiniteScrollRef.current) {
      intersectionObserver.observe(divInfiniteScrollRef.current);
    }
    return () => {
      intersectionObserver.disconnect();
    };
  }, [divInfiniteScrollRef, loading]);

  function handelKeyPress() {
    if (search === "") {
      setPokemons(allpokemons);
      // console.log(allpokemons);
    } else {
      console.log("pokemons começo", pokemons);
      const filteredPokemons = pokemons.filter(
        (pokemon) =>
          pokemon.name.toLowerCase().includes(search.toLowerCase()) ||
          pokemon.id.toString().includes(search)
      );
      setPokemons(filteredPokemons);
      console.log({ filteredPokemons, search });
      console.log({ pokemons, pokemonFiltrado });

      // console.log("Pokemons Pesquisados", filteredPokemons);
    }
  }

  const useWindowWide = () => {
    const [width, setWidth] = useState(0);

    useEffect(() => {
      function handleResize() {
        setWidth(window.innerWidth);
      }

      window.addEventListener("resize", handleResize);

      handleResize();

      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }, [setWidth]);

    return width;
  };

  const wide = useWindowWide();

  // console.log(pokemons.map((pokemon) => pokemon.id));
  // console.log("AQQQ O IDDD", id);

  return (
    <>
      <Head>
        <title>Pokédex</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SearchBar
        onClick={() => handelKeyPress()}
        onKeyDown={(e) => {
          const { key } = e;
          key === "Enter" ? handelKeyPress() : null;
        }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <FilterOptions onChangeType={filterPokemonsByType} />
      <S.Wrapper>
        <S.Container>
          {pokemonFiltrado.map((pokemon, index) => {
            return (
              <CardPokemon
                onClick={() => {
                  setOpenPokemonProfileInDesktop(true);
                  setId(pokemon.id);
                }}
                sizeScreen={wide}
                key={index}
                pokemon={pokemon}
              />
            );
          })}
        </S.Container>
        {openPokemonProfileInDesktop && wide >= 1024 ? (
          <S.WrapperProfileComponent>
            <ProfileCard id={id} />
          </S.WrapperProfileComponent>
        ) : null}
      </S.Wrapper>

      <div ref={divInfiniteScrollRef} />
    </>
  );
}
